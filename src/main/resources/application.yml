server:
  port: 8080

spring:
  application:
    name: gateway-service

  cloud:
    gateway:
      routes:
        - id: user-service
          uri: ${USER_SERVICE_URL:http://user-service}
          predicates:
            - Path=/api/users/**
        - id: product-service
          uri: ${PRODUCT_SERVICE_URL:http://product-service}
          predicates:
            - Path=/api/products/**
  
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:kafka:9092}
    consumer:
      group-id: gateway-service
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
  
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            redirect-uri: "https://oauth.buildingbite.com/login/oauth2/code/{registrationId}"
            scope:
              - email
              - profile

# JWT Configuration
jwt:
  secret: ${JWT_SECRET:mySecretKey}
  access-token-expiration: 3600000  # 1 hour in milliseconds
  refresh-token-expiration: 2592000000  # 30 days in milliseconds

# Service URLs
user-service:
  url: ${USER_SERVICE_URL:http://user-service}

product-service:
  url: ${PRODUCT_SERVICE_URL:http://product-service}

# App Configuration
app:
  oauth2:
    redirectUri: ${FRONTEND_URL:https://buildingbite.com}


logging:
  level:
    com.example.gateway: DEBUG
    org.springframework.security: DEBUG
    org.springframework.security.oauth2: DEBUG
    org.springframework.security.web: DEBUG
    org.springframework.web.cors: DEBUG